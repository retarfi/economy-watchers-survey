name: Release
on:
  pull_request:
    branches:
      - main
    types:
      - closed
jobs:
  tagging:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    steps:
        - name: Determine the tag name based on the branch name
          id: get_version
          run: |
            echo "TAG=$(echo $BRANCH | cut -d / -f 2)" >> $GITHUB_OUTPUT
          env:
            BRANCH: ${{ github.event.pull_request.head.ref }}
        - name: Echo tag
          run: echo ${{ steps.get_version.outputs.TAG }}
        - uses: actions/checkout@v4
        - run: |
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global user.name "github-actions[bot]"
            git fetch origin ${{ github.event.pull_request.head.ref }}
            git checkout main
            git tag -a `echo '${{ github.event.pull_request.head.ref }}' | sed 's/release\///'` -m " "
            git push origin `echo '${{ github.event.pull_request.head.ref }}' | sed 's/release\///'`
  build_and_release:
    name: build_and_release
    needs: [tagging]
    runs-on: ubuntu-latest
    steps:
    - name: Determine the tag name based on the branch name
      id: get_version
      run: |
        echo "TAG=$(echo $BRANCH | cut -d / -f 2)" >> $GITHUB_OUTPUT
      env:
        BRANCH: ${{ github.event.pull_request.head.ref }}
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        python -m pip install huggingface_hub
    - name: Download from HuggingFace datasets
      run: |
        huggingface-cli login --token ${{ secrets.HUGGING_FACE_SECRET }}
        huggingface-cli download retarfi/economy-watchers-survey --local-dir hf --local-dir-use-symlinks=False --repo-type dataset
    - name: Build
      run: |
        sudo apt install -y jq
        bash utils/build.sh
    - name: create zip for release
      run: |
        mkdir release-${{ steps.get_version.outputs.TAG }}
        cp hf/current/train.jsonl release-${{ steps.get_version.outputs.TAG }}
        cp hf/current/test.jsonl release-${{ steps.get_version.outputs.TAG }}
        cp hf/future/train.jsonl release-${{ steps.get_version.outputs.TAG }}
        cp hf/future/test.jsonl release-${{ steps.get_version.outputs.TAG }}
        cp data/LICENSE release-${{ steps.get_version.outputs.TAG }}
        zip release-${{ steps.get_version.outputs.TAG }}.zip -r release-${{ steps.get_version.outputs.TAG }}
    - name: Push a release to GitHub. At the beginning of release, the body of pull request is shown.
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.TAG }}
        release_name: ${{ steps.get_version.outputs.TAG }}
        draft: false
        prerelease: false
        body: |
          ${{ github.event.pull_request.body }}
          This release is automatically generated.
          Please see the pull request for more details.
          [${{ github.event.pull_request.html_url }}](${{ github.event.pull_request.html_url }})
    - name: Generate checksum for all elements in dist directory
      run: |
        sha256sum release-${{ steps.get_version.outputs.TAG }}.zip > release-${{ steps.get_version.outputs.TAG }}-checksums.txt
    - name: Attach an archive of source files to the release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-${{ steps.get_version.outputs.TAG }}.zip
        asset_name: release-${{ steps.get_version.outputs.TAG }}.zip
        asset_content_type: application/zip
    - name: Attach an archive of source files to the release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-${{ steps.get_version.outputs.TAG }}-checksums.txt
        asset_name: release-${{ steps.get_version.outputs.TAG }}-checksums.txt
        asset_content_type: text/plain
    - name: HuggingFace upload
      run: |
        cp src/economy_watchers_survey/version.py hf/
        huggingface-cli upload retarfi/economy-watchers-survey --repo-type dataset --include="*.jsonl" --include="version.py" --commit-message="Release ${{ steps.get_version.outputs.TAG }}"
        huggingface-cli tag retarf/economy-watchers-survey ${{ steps.get_version.outputs.TAG }} --repo-type dataset -y

  delete-branch:
    runs-on: ubuntu-latest
    needs: [tagging, build_and_release]
    steps:
    - uses: actions/checkout@v4
    - name: Delete the release branch
      run: |
        git push --delete origin ${{ github.event.pull_request.head.ref }}